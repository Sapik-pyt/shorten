// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: shorten/shorten.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Shorten_CreateShortLink_FullMethodName   = "/shorten.Shorten/CreateShortLink"
	Shorten_FetchOriginalLink_FullMethodName = "/shorten.Shorten/FetchOriginalLink"
)

// ShortenClient is the client API for Shorten service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortenClient interface {
	CreateShortLink(ctx context.Context, in *CreateShortLinkRequest, opts ...grpc.CallOption) (*CreateShortLinkResponse, error)
	FetchOriginalLink(ctx context.Context, in *FetchOriginalLinkRequest, opts ...grpc.CallOption) (*FetchOriginalLinkResponse, error)
}

type shortenClient struct {
	cc grpc.ClientConnInterface
}

func NewShortenClient(cc grpc.ClientConnInterface) ShortenClient {
	return &shortenClient{cc}
}

func (c *shortenClient) CreateShortLink(ctx context.Context, in *CreateShortLinkRequest, opts ...grpc.CallOption) (*CreateShortLinkResponse, error) {
	out := new(CreateShortLinkResponse)
	err := c.cc.Invoke(ctx, Shorten_CreateShortLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenClient) FetchOriginalLink(ctx context.Context, in *FetchOriginalLinkRequest, opts ...grpc.CallOption) (*FetchOriginalLinkResponse, error) {
	out := new(FetchOriginalLinkResponse)
	err := c.cc.Invoke(ctx, Shorten_FetchOriginalLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortenServer is the server API for Shorten service.
// All implementations must embed UnimplementedShortenServer
// for forward compatibility
type ShortenServer interface {
	CreateShortLink(context.Context, *CreateShortLinkRequest) (*CreateShortLinkResponse, error)
	FetchOriginalLink(context.Context, *FetchOriginalLinkRequest) (*FetchOriginalLinkResponse, error)
	mustEmbedUnimplementedShortenServer()
}

// UnimplementedShortenServer must be embedded to have forward compatible implementations.
type UnimplementedShortenServer struct {
}

func (UnimplementedShortenServer) CreateShortLink(context.Context, *CreateShortLinkRequest) (*CreateShortLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShortLink not implemented")
}
func (UnimplementedShortenServer) FetchOriginalLink(context.Context, *FetchOriginalLinkRequest) (*FetchOriginalLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchOriginalLink not implemented")
}
func (UnimplementedShortenServer) mustEmbedUnimplementedShortenServer() {}

// UnsafeShortenServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortenServer will
// result in compilation errors.
type UnsafeShortenServer interface {
	mustEmbedUnimplementedShortenServer()
}

func RegisterShortenServer(s grpc.ServiceRegistrar, srv ShortenServer) {
	s.RegisterService(&Shorten_ServiceDesc, srv)
}

func _Shorten_CreateShortLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShortLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenServer).CreateShortLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shorten_CreateShortLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenServer).CreateShortLink(ctx, req.(*CreateShortLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shorten_FetchOriginalLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchOriginalLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenServer).FetchOriginalLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shorten_FetchOriginalLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenServer).FetchOriginalLink(ctx, req.(*FetchOriginalLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Shorten_ServiceDesc is the grpc.ServiceDesc for Shorten service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Shorten_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shorten.Shorten",
	HandlerType: (*ShortenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateShortLink",
			Handler:    _Shorten_CreateShortLink_Handler,
		},
		{
			MethodName: "FetchOriginalLink",
			Handler:    _Shorten_FetchOriginalLink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shorten/shorten.proto",
}
